{"ast":null,"code":"var _jsxFileName = \"/home/chinmay/Desktop/react-code/src/components/Cards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cards({\n  logout\n}) {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  useEffect(() => {\n    const getCards = async () => {\n      try {\n        console.log(localStorage.token);\n        const response = await fetch('http://localhost:8080/cards', {\n          method: 'GET',\n          headers: {\n            Authorization: \"Bearer \" + localStorage.token\n          }\n        });\n        const parseRes = await response.json();\n        console.log(parseRes);\n        setCards(parseRes.rows);\n        console.log(cards);\n      } catch (err) {\n        console.error(err.message);\n      }\n    };\n\n    getCards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), cards.map(card => {\n      /*#__PURE__*/\n      _jsxDEV(\"p\", {\n        children: card\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"End\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Cards, \"M51NroWgc5aUEHiqsZiaQ+7WeWA=\");\n\n_c = Cards;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"sources":["/home/chinmay/Desktop/react-code/src/components/Cards.js"],"names":["React","useEffect","useState","Cards","logout","cards","setCards","getCards","console","log","localStorage","token","response","fetch","method","headers","Authorization","parseRes","json","rows","err","error","message","map","card"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AACA,eAAe,SAASC,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA2B;AAAA;;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,QAAQ,GAAG,YAAY;AACzB,UAAI;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYC,YAAY,CAACC,KAAzB;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACxDC,UAAAA,MAAM,EAAE,KADgD;AAExDC,UAAAA,OAAO,EAAE;AACLC,YAAAA,aAAa,EAAE,YAAYN,YAAY,CAACC;AADnC;AAF+C,SAAhC,CAA5B;AAMA,cAAMM,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAvB;AACAV,QAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ;AACAX,QAAAA,QAAQ,CAACW,QAAQ,CAACE,IAAV,CAAR;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACH,OAZD,CAYE,OAAOe,GAAP,EAAY;AACVZ,QAAAA,OAAO,CAACa,KAAR,CAAcD,GAAG,CAACE,OAAlB;AACH;AACJ,KAhBD;;AAiBAf,IAAAA,QAAQ;AACX,GAnBQ,EAmBN,EAnBM,CAAT;AAoBA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,KAAK,CAACkB,GAAN,CAAUC,IAAI,IAAI;AACf;AAAA;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA;AACH,KAFA,CAFL,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA,kBADJ;AASH;;GA/BuBrB,K;;KAAAA,K;AA+BvB","sourcesContent":["import React, { useEffect } from 'react';\nimport { useState } from 'react';\nexport default function Cards({ logout }) {\n    const [cards, setCards] = useState([]);\n    useEffect(() => {\n        const getCards = async () => {\n            try {\n                console.log(localStorage.token);\n                const response = await fetch('http://localhost:8080/cards', {\n                    method: 'GET',\n                    headers: {\n                        Authorization: \"Bearer \" + localStorage.token\n                    }\n                });\n                const parseRes = await response.json();\n                console.log(parseRes);\n                setCards(parseRes.rows);\n                console.log(cards);\n            } catch (err) {\n                console.error(err.message);\n            }\n        }\n        getCards();\n    }, []);\n    return (\n        <>\n            <h1>Cards</h1>\n            {cards.map(card => {\n                <p>{card}</p>\n            })}\n            <h1>End</h1>\n        </>\n    );\n};"]},"metadata":{},"sourceType":"module"}